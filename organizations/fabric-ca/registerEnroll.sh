#!/usr/bin/env bash

function createOrg1() {
  infoln "Enrolling the CA admin"
  mkdir -p organizations/peerOrganizations/hospital.example.com/

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/hospital.example.com/

  set -x
  fabric-ca-client enroll -u https://admin:adminpw@localhost:7054 --caname ca-hospital --tls.certfiles "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem"
  { set +x; } 2>/dev/null

  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-7054-ca-hospital.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-7054-ca-hospital.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-7054-ca-hospital.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-7054-ca-hospital.pem
    OrganizationalUnitIdentifier: orderer' > "${PWD}/organizations/peerOrganizations/hospital.example.com/msp/config.yaml"

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy hospital's CA cert to hospital's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p "${PWD}/organizations/peerOrganizations/hospital.example.com/msp/tlscacerts"
  cp "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem" "${PWD}/organizations/peerOrganizations/hospital.example.com/msp/tlscacerts/ca.crt"

  # Copy hospital's CA cert to hospital's /tlsca directory (for use by clients)
  mkdir -p "${PWD}/organizations/peerOrganizations/hospital.example.com/tlsca"
  cp "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem" "${PWD}/organizations/peerOrganizations/hospital.example.com/tlsca/tlsca.hospital.example.com-cert.pem"

  # Copy hospital's CA cert to hospital's /ca directory (for use by clients)
  mkdir -p "${PWD}/organizations/peerOrganizations/hospital.example.com/ca"
  cp "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem" "${PWD}/organizations/peerOrganizations/hospital.example.com/ca/ca.hospital.example.com-cert.pem"

  infoln "Registering peer0"
  set -x
  fabric-ca-client register --caname ca-hospital --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem"
  { set +x; } 2>/dev/null

  infoln "Registering user"
  set -x
  fabric-ca-client register --caname ca-hospital --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem"
  { set +x; } 2>/dev/null

  infoln "Registering the org admin"
  set -x
  fabric-ca-client register --caname ca-hospital --id.name hospitaladmin --id.secret hospitaladminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem"
  { set +x; } 2>/dev/null

  infoln "Generating the peer0 msp"
  set -x
  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:7054 --caname ca-hospital -M "${PWD}/organizations/peerOrganizations/hospital.example.com/peers/peer0.hospital.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/peerOrganizations/hospital.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/hospital.example.com/peers/peer0.hospital.example.com/msp/config.yaml"

  infoln "Generating the peer0-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:7054 --caname ca-hospital -M "${PWD}/organizations/peerOrganizations/hospital.example.com/peers/peer0.hospital.example.com/tls" --enrollment.profile tls --csr.hosts peer0.hospital.example.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem"
  { set +x; } 2>/dev/null

  # Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
  cp "${PWD}/organizations/peerOrganizations/hospital.example.com/peers/peer0.hospital.example.com/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/hospital.example.com/peers/peer0.hospital.example.com/tls/ca.crt"
  cp "${PWD}/organizations/peerOrganizations/hospital.example.com/peers/peer0.hospital.example.com/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/hospital.example.com/peers/peer0.hospital.example.com/tls/server.crt"
  cp "${PWD}/organizations/peerOrganizations/hospital.example.com/peers/peer0.hospital.example.com/tls/keystore/"* "${PWD}/organizations/peerOrganizations/hospital.example.com/peers/peer0.hospital.example.com/tls/server.key"

  infoln "Generating the user msp"
  set -x
  fabric-ca-client enroll -u https://user1:user1pw@localhost:7054 --caname ca-hospital -M "${PWD}/organizations/peerOrganizations/hospital.example.com/users/User1@hospital.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/peerOrganizations/hospital.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/hospital.example.com/users/User1@hospital.example.com/msp/config.yaml"

  infoln "Generating the org admin msp"
  set -x
  fabric-ca-client enroll -u https://hospitaladmin:hospitaladminpw@localhost:7054 --caname ca-hospital -M "${PWD}/organizations/peerOrganizations/hospital.example.com/users/Admin@hospital.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/hospital/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/peerOrganizations/hospital.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/hospital.example.com/users/Admin@hospital.example.com/msp/config.yaml"
}

function createOrg2() {
  infoln "Enrolling the CA admin"
  mkdir -p organizations/peerOrganizations/insurance.example.com/

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/peerOrganizations/insurance.example.com/

  set -x
  fabric-ca-client enroll -u https://admin:adminpw@localhost:8054 --caname ca-insurance --tls.certfiles "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem"
  { set +x; } 2>/dev/null

  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-8054-ca-insurance.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-8054-ca-insurance.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-8054-ca-insurance.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-8054-ca-insurance.pem
    OrganizationalUnitIdentifier: orderer' > "${PWD}/organizations/peerOrganizations/insurance.example.com/msp/config.yaml"

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy insurance's CA cert to insurance's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p "${PWD}/organizations/peerOrganizations/insurance.example.com/msp/tlscacerts"
  cp "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem" "${PWD}/organizations/peerOrganizations/insurance.example.com/msp/tlscacerts/ca.crt"

  # Copy insurance's CA cert to insurance's /tlsca directory (for use by clients)
  mkdir -p "${PWD}/organizations/peerOrganizations/insurance.example.com/tlsca"
  cp "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem" "${PWD}/organizations/peerOrganizations/insurance.example.com/tlsca/tlsca.insurance.example.com-cert.pem"

  # Copy insurance's CA cert to insurance's /ca directory (for use by clients)
  mkdir -p "${PWD}/organizations/peerOrganizations/insurance.example.com/ca"
  cp "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem" "${PWD}/organizations/peerOrganizations/insurance.example.com/ca/ca.insurance.example.com-cert.pem"

  infoln "Registering peer0"
  set -x
  fabric-ca-client register --caname ca-insurance --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem"
  { set +x; } 2>/dev/null

  infoln "Registering user"
  set -x
  fabric-ca-client register --caname ca-insurance --id.name user1 --id.secret user1pw --id.type client --tls.certfiles "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem"
  { set +x; } 2>/dev/null

  infoln "Registering the org admin"
  set -x
  fabric-ca-client register --caname ca-insurance --id.name insuranceadmin --id.secret insuranceadminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem"
  { set +x; } 2>/dev/null

  infoln "Generating the peer0 msp"
  set -x
  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:8054 --caname ca-insurance -M "${PWD}/organizations/peerOrganizations/insurance.example.com/peers/peer0.insurance.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/peerOrganizations/insurance.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/insurance.example.com/peers/peer0.insurance.example.com/msp/config.yaml"

  infoln "Generating the peer0-tls certificates, use --csr.hosts to specify Subject Alternative Names"
  set -x
  fabric-ca-client enroll -u https://peer0:peer0pw@localhost:8054 --caname ca-insurance -M "${PWD}/organizations/peerOrganizations/insurance.example.com/peers/peer0.insurance.example.com/tls" --enrollment.profile tls --csr.hosts peer0.insurance.example.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem"
  { set +x; } 2>/dev/null

  # Copy the tls CA cert, server cert, server keystore to well known file names in the peer's tls directory that are referenced by peer startup config
  cp "${PWD}/organizations/peerOrganizations/insurance.example.com/peers/peer0.insurance.example.com/tls/tlscacerts/"* "${PWD}/organizations/peerOrganizations/insurance.example.com/peers/peer0.insurance.example.com/tls/ca.crt"
  cp "${PWD}/organizations/peerOrganizations/insurance.example.com/peers/peer0.insurance.example.com/tls/signcerts/"* "${PWD}/organizations/peerOrganizations/insurance.example.com/peers/peer0.insurance.example.com/tls/server.crt"
  cp "${PWD}/organizations/peerOrganizations/insurance.example.com/peers/peer0.insurance.example.com/tls/keystore/"* "${PWD}/organizations/peerOrganizations/insurance.example.com/peers/peer0.insurance.example.com/tls/server.key"

  infoln "Generating the user msp"
  set -x
  fabric-ca-client enroll -u https://user1:user1pw@localhost:8054 --caname ca-insurance -M "${PWD}/organizations/peerOrganizations/insurance.example.com/users/User1@insurance.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/peerOrganizations/insurance.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/insurance.example.com/users/User1@insurance.example.com/msp/config.yaml"

  infoln "Generating the org admin msp"
  set -x
  fabric-ca-client enroll -u https://insuranceadmin:insuranceadminpw@localhost:8054 --caname ca-insurance -M "${PWD}/organizations/peerOrganizations/insurance.example.com/users/Admin@insurance.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/insurance/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/peerOrganizations/insurance.example.com/msp/config.yaml" "${PWD}/organizations/peerOrganizations/insurance.example.com/users/Admin@insurance.example.com/msp/config.yaml"
}

function createOrderer() {
  infoln "Enrolling the CA admin"
  mkdir -p organizations/ordererOrganizations/example.com

  export FABRIC_CA_CLIENT_HOME=${PWD}/organizations/ordererOrganizations/example.com

  set -x
  fabric-ca-client enroll -u https://admin:adminpw@localhost:9054 --caname ca-orderer --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  echo 'NodeOUs:
  Enable: true
  ClientOUIdentifier:
    Certificate: cacerts/localhost-9054-ca-orderer.pem
    OrganizationalUnitIdentifier: client
  PeerOUIdentifier:
    Certificate: cacerts/localhost-9054-ca-orderer.pem
    OrganizationalUnitIdentifier: peer
  AdminOUIdentifier:
    Certificate: cacerts/localhost-9054-ca-orderer.pem
    OrganizationalUnitIdentifier: admin
  OrdererOUIdentifier:
    Certificate: cacerts/localhost-9054-ca-orderer.pem
    OrganizationalUnitIdentifier: orderer' > "${PWD}/organizations/ordererOrganizations/example.com/msp/config.yaml"

  # Since the CA serves as both the organization CA and TLS CA, copy the org's root cert that was generated by CA startup into the org level ca and tlsca directories

  # Copy orderer org's CA cert to orderer org's /msp/tlscacerts directory (for use in the channel MSP definition)
  mkdir -p "${PWD}/organizations/ordererOrganizations/example.com/msp/tlscacerts"
  cp "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/example.com/msp/tlscacerts/tlsca.example.com-cert.pem"

  # Copy orderer org's CA cert to orderer org's /tlsca directory (for use by clients)
  mkdir -p "${PWD}/organizations/ordererOrganizations/example.com/tlsca"
  cp "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem" "${PWD}/organizations/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem"

# Loop through each orderer (orderer, orderer2, orderer3, orderer4) to register and generate artifacts
  for ORDERER in orderer orderer2 orderer3 orderer4; do
    infoln "Registering ${ORDERER}"
    set -x
    fabric-ca-client register --caname ca-orderer --id.name ${ORDERER} --id.secret ${ORDERER}pw --id.type orderer --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
    { set +x; } 2>/dev/null

    infoln "Generating the ${ORDERER} MSP"
    set -x
    fabric-ca-client enroll -u https://${ORDERER}:${ORDERER}pw@localhost:9054 --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
    { set +x; } 2>/dev/null

    cp "${PWD}/organizations/ordererOrganizations/example.com/msp/config.yaml" "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/msp/config.yaml"

    # Workaround: Rename the signcert file to ensure consistency with Cryptogen generated artifacts
    mv "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/msp/signcerts/cert.pem" "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/msp/signcerts/${ORDERER}.example.com-cert.pem"

    infoln "Generating the ${ORDERER} TLS certificates, use --csr.hosts to specify Subject Alternative Names"
    set -x
    fabric-ca-client enroll -u https://${ORDERER}:${ORDERER}pw@localhost:9054 --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/tls" --enrollment.profile tls --csr.hosts ${ORDERER}.example.com --csr.hosts localhost --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
    { set +x; } 2>/dev/null

    # Copy the tls CA cert, server cert, server keystore to well known file names in the orderer's tls directory that are referenced by orderer startup config
    cp "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/tls/tlscacerts/"* "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/tls/ca.crt"
    cp "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/tls/signcerts/"* "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/tls/server.crt"
    cp "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/tls/keystore/"* "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/tls/server.key"

    # Copy orderer org's CA cert to orderer's /msp/tlscacerts directory (for use in the orderer MSP definition)
    mkdir -p "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/msp/tlscacerts"
    cp "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/tls/tlscacerts/"* "${PWD}/organizations/ordererOrganizations/example.com/orderers/${ORDERER}.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"
  done

  # Register and generate artifacts for the orderer admin
  infoln "Registering the orderer admin"
  set -x
  fabric-ca-client register --caname ca-orderer --id.name ordererAdmin --id.secret ordererAdminpw --id.type admin --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  infoln "Generating the admin msp"
  set -x
  fabric-ca-client enroll -u https://ordererAdmin:ordererAdminpw@localhost:9054 --caname ca-orderer -M "${PWD}/organizations/ordererOrganizations/example.com/users/Admin@example.com/msp" --tls.certfiles "${PWD}/organizations/fabric-ca/ordererOrg/ca-cert.pem"
  { set +x; } 2>/dev/null

  cp "${PWD}/organizations/ordererOrganizations/example.com/msp/config.yaml" "${PWD}/organizations/ordererOrganizations/example.com/users/Admin@example.com/msp/config.yaml"
}
